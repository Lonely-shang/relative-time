{"version":3,"file":"relativeTimeConvert.esm.js","sources":["../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/toInteger/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/toDate/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/startOfWeek/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/startOfDay/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInCalendarDays/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/compareAsc/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInCalendarMonths/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInCalendarYears/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInDays/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInMilliseconds/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/roundingMethods/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/endOfDay/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/isLastDayOfMonth/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/startOfMonth/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/startOfYear/index.js","../src/computedDate.ts","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInYears/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInMonths/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInWeeks/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInHours/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/constants/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInMinutes/index.js","../node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/differenceInSeconds/index.js","../src/zh-cn.ts","../src/relativeTimeConvert.ts"],"sourcesContent":["export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function (value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import {\r\n  startOfYear,\r\n  differenceInYears,\r\n  startOfMonth,\r\n  differenceInMonths,\r\n  startOfWeek,\r\n  differenceInWeeks,\r\n  startOfDay,\r\n  differenceInDays,\r\n  differenceInHours,\r\n  differenceInMinutes,\r\n  differenceInSeconds,\r\n} from 'date-fns';\r\n\r\ninterface IComputedDate {\r\n  diffYears:() => number;\r\n  absDiffYears:() => number;\r\n  diffMonths: ()=> number;\r\n  absDiffMonths: ()=> number;\r\n  diffWeeks: ()=> number;\r\n  absDiffWeeks: ()=> number;\r\n  diffDays: ()=> number;\r\n  absDiffDays: ()=> number;\r\n  diffHours: ()=> number;\r\n  absDiffHours: ()=> number;\r\n  diffMinutes: ()=> number;\r\n  absDiffMinutes: ()=> number;\r\n  diffSeconds: ()=> number;\r\n  absDiffSeconds: ()=> number;\r\n}\r\n\r\nexport default class ComputedDate implements IComputedDate{\r\n\r\n  private now: Date | number;\r\n  private value: number | Date;\r\n  private weekStartsOn: WeekStart;\r\n\r\n  constructor(value: number | Date, weekStartsOn: WeekStart = 1, compareDate?: string | number ){\r\n    this.value = value;\r\n    this.weekStartsOn = weekStartsOn;\r\n    this.now = compareDate ? new Date(compareDate) : Date.now();\r\n  }\r\n\r\n  diffYears() {\r\n    const startOfYearForTarget = startOfYear(this.value);\r\n    const startOfYearForToday = startOfYear(this.now);\r\n    return differenceInYears(startOfYearForToday, startOfYearForTarget);\r\n  }\r\n  absDiffYears () {\r\n    return Math.abs(this.diffYears());\r\n  }\r\n\r\n  diffMonths () {\r\n    const startOfMonthForTarget = startOfMonth(this.value);\r\n    const startOfMonthForToday = startOfMonth(this.now);\r\n    return differenceInMonths(startOfMonthForToday, startOfMonthForTarget);\r\n  }\r\n  absDiffMonths () {\r\n    return Math.abs(this.diffMonths());\r\n  }\r\n\r\n  diffWeeks () {\r\n    const startOfWeekForTarget = startOfWeek(this.value, { weekStartsOn: this.weekStartsOn });\r\n    const startOfWeekForToday = startOfWeek(this.now, { weekStartsOn: this.weekStartsOn });\r\n    return differenceInWeeks(startOfWeekForToday, startOfWeekForTarget);\r\n  }\r\n  absDiffWeeks () {\r\n    return Math.abs(this.diffWeeks());\r\n  }\r\n\r\n  diffDays () {\r\n    const startOfDayForTarget = startOfDay(this.value);\r\n    const startOfDayForToday = startOfDay(this.now);\r\n    return differenceInDays(startOfDayForToday, startOfDayForTarget);\r\n  }\r\n  absDiffDays () {\r\n    return Math.abs(this.diffDays());\r\n  }\r\n\r\n  diffHours () {\r\n    return differenceInHours(this.now, this.value);\r\n  }\r\n  absDiffHours () {\r\n    return Math.abs(this.diffHours());\r\n  }\r\n\r\n  diffMinutes () {\r\n    return differenceInMinutes(this.now, this.value);\r\n  }\r\n  absDiffMinutes () {\r\n    return Math.abs(this.diffMinutes());\r\n  }\r\n\r\n  diffSeconds () {\r\n    return differenceInSeconds(this.now, this.value);\r\n  }\r\n  absDiffSeconds () {\r\n    return Math.abs(this.diffSeconds());\r\n  }\r\n\r\n}\r\n","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInDays from \"../differenceInDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","export default {\r\n  yearsAgo(num: number) {\r\n    return num === 1 ? '去年' : `${num}年前`;\r\n  },\r\n  monthsAgo (num: number) {\r\n    return num === 1 ? '上个月' : `${num}个月前`;\r\n  },\r\n  weeksAgo (num: number) {\r\n    return num === 1 ? '上周' : `${num}周前`;\r\n  },\r\n  daysAgo (num: number) {\r\n    return num === 1 ? '昨天' : `${num}天前`;\r\n  },\r\n  daysLater(num: number) {\r\n    return num === 1 ? '明天' : `${num}天后`;\r\n  },\r\n  weeksLater(num: number) {\r\n    return num === 1 ? '下周' : `${num}周后`;\r\n  },\r\n  monthsLater(num: number) {\r\n    return num === 1 ? '下个月' : `${num}个月后`;\r\n  },\r\n  yearsLater(num: number) {\r\n    return num === 1 ? '明年' : `${num}年后`;\r\n  },\r\n  hoursAgo: '小时前',\r\n  minutesAgo: '分钟前',\r\n  justnow: '刚刚',\r\n  later: '稍后',\r\n  minutesLater: '分钟后',\r\n  hoursLater: '小时后',\r\n}","import ComputedDate from './computedDate';\r\nimport relativeTimeText  from './zh-cn';\r\n\r\n/**\r\n *\r\n * @param value 转换的值\r\n * @param limit 为最大限制的时间戳，超过这个时间戳就返回绝对时间 默认最大相差时间为三年\r\n * @param compareDate 非必选， 传入被比较时间，默认被比较时间为当前时间\r\n * @param weekStartsOn 非必选，每周起始日期的index，0为周日\r\n * @returns 返回相对时间\r\n */\r\nexport default function relativeTimeConvert(\r\n  value: number | Date | string,\r\n  limit: number = 94694400,\r\n  compareDate?: number | string,\r\n  weekStartsOn: WeekStart = 1,\r\n) {\r\n  if (!value) return '';\r\n\r\n  let _value = typeof value === 'number' ? value : new Date(value.toString().replace(/-/g, '/')).getTime();\r\n\r\n  const computedDate = new ComputedDate(_value, weekStartsOn, compareDate);\r\n\r\n  const threshold = {\r\n    month: 3, // at least 3 months using year.\r\n    week: 4, // at least 4 weeks using month.\r\n    day: 6, // at least 6 days using weeks.\r\n    hour: 6, // at least 6 hours using day.\r\n    minute: 59, // at least 59 minutes using hour.\r\n    second: 59 // at least 59 seconds using minute.\r\n  };\r\n  /**\r\n   *  相差时间大于最大限制的时间戳，超过这个时间戳就返回绝对时间\r\n   */\r\n  if (computedDate.absDiffSeconds() > limit) {\r\n    return new Date(value as number);\r\n  }\r\n  if (computedDate.absDiffYears() > 0 && computedDate.absDiffMonths() > threshold.month) {\r\n    return computedDate.diffYears() > 0 ? relativeTimeText.yearsAgo(computedDate.absDiffYears()) : relativeTimeText.yearsLater(computedDate.absDiffYears());\r\n  } else if (computedDate.absDiffMonths() > 0 && computedDate.absDiffWeeks() >= threshold.week) {\r\n    return computedDate.diffMonths() > 0 ? relativeTimeText.monthsAgo(computedDate.absDiffMonths()) : relativeTimeText.monthsLater(computedDate.absDiffMonths());\r\n  } else if (computedDate.absDiffWeeks() > 0 && computedDate.absDiffDays() > threshold.day) {\r\n    return computedDate.diffWeeks() > 0 ? relativeTimeText.weeksAgo(computedDate.absDiffWeeks()) : relativeTimeText.weeksLater(computedDate.absDiffWeeks());\r\n  } else if (computedDate.absDiffDays() > 0 && computedDate.absDiffHours() > threshold.hour) {\r\n    return computedDate.diffDays() > 0 ? relativeTimeText.daysAgo(computedDate.absDiffDays()) : relativeTimeText.daysLater(computedDate.absDiffDays());\r\n  } else if (computedDate.absDiffHours() > 0 && computedDate.absDiffMinutes() > threshold.minute) {\r\n    return computedDate.absDiffHours() + (computedDate.diffHours() > 0 ? relativeTimeText.hoursAgo : relativeTimeText.hoursLater);\r\n  } else if (computedDate.absDiffMinutes() > 0 && computedDate.absDiffSeconds() > threshold.second) {\r\n    return computedDate.absDiffMinutes() + (computedDate.diffMinutes() > 0 ? relativeTimeText.minutesAgo : relativeTimeText.minutesLater);\r\n  } else if (computedDate.diffSeconds()) {\r\n    return computedDate.diffSeconds() > 0 ? relativeTimeText.justnow : relativeTimeText.later;\r\n  } else {\r\n    return '';\r\n  }\r\n}"],"names":["toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","startOfWeek","dirtyDate","dirtyOptions","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","date","day","getDay","diff","setDate","getDate","setHours","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","compareAsc","dateLeft","dateRight","differenceInCalendarMonths","yearDiff","monthDiff","differenceInCalendarYears","compareLocalAsc","differenceInDays","sign","difference","abs","isLastDayNotFull","result","differenceInMilliseconds","roundingMap","trunc","value","getRoundingMethod","method","endOfDay","endOfMonth","month","setFullYear","isLastDayOfMonth","startOfMonth","startOfYear","cleanDate","ComputedDate","compareDate","this","now","diffYears","startOfYearForTarget","isLastYearNotFull","differenceInYears","absDiffYears","diffMonths","startOfMonthForTarget","setMonth","isLastMonthNotFull","differenceInMonths","absDiffMonths","diffWeeks","startOfWeekForTarget","roundingMethod","differenceInWeeks","absDiffWeeks","diffDays","startOfDayForTarget","absDiffDays","diffHours","differenceInHours","absDiffHours","diffMinutes","differenceInMinutes","absDiffMinutes","diffSeconds","differenceInSeconds","absDiffSeconds","relativeTimeText","num","concat","relativeTimeConvert","limit","_value","replace","computedDate","threshold"],"mappings":"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"}